#!/bin/sh
# Fail hard and fast
set -eo pipefail

# 获取PHP扩展的安装目录
NGINX_ROOT_DIR=${NGINX_ROOT_DIR:-"/etc/nginx"}
NGINX_CONF_DIR=${NGINX_CONF_DIR:-"/etc/nginx/conf.d"}
NGINX_HTTP_SSI=${NGINX_HTTP_SSI:-"on"}
NGINX_HTTP_SSI_SILENT_ERRORS=${NGINX_HTTP_SSI_SILENT_ERRORS:-"on"}
NGINX_HTTP_LOG_FORMAT=${NGINX_HTTP_LOG_FORMAT:-'$remote_addr - $remote_user [$time_iso8601] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"'}
NGINX_HTTP_CHARSET=${NGINX_HTTP_CHARSET:-"utf-8"}
NGINX_HTTP_SERVER_LISTEN=${NGINX_HTTP_SERVER_LISTEN:-"80"}
NGINX_HTTP_SERVER_NAME=${NGINX_HTTP_SERVER_NAME:-"_"}
NGINX_HTTP_SERVER_ROOT=${NGINX_HTTP_SERVER_ROOT:-"/var/www/html"}
NGINX_HTTP_SERVER_INDEX=${NGINX_HTTP_SERVER_INDEX:-"index.php index.html index.htm"}
NGINX_SERVER_FASTCGI_PASS=${NGINX_SERVER_FASTCGI_PASS:-""}
NGINX_HTTP_LUA_PACKAGE_PATH=${NGINX_HTTP_LUA_PACKAGE_PATH:-"/etc/nginx/lua/lib/${LUA_NGINX_MODULE_VERSION}/?.lua"}
NGINX_HTTP_LUA_SEC_RULES_STR=${NGINX_HTTP_LUA_SEC_RULES_STR:-"SecRulesEnabled"}
REDIS_HOST=${REDIS_HOST:-"127.0.0.1"}
REDIS_PORT=${REDIS_PORT:-6379}

cat >${NGINX_ROOT_DIR}/nginx.conf <<EOF
user  www-data www-data;
worker_processes  auto;

error_log  ${NGINX_LOG_DIR}/error.log warn;
pid        /var/run/nginx.pid;

worker_rlimit_nofile 51200;

# 动态模块加载 http://nginx.org/en/docs/ngx_core_module.html#load_module
load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;
load_module modules/ngx_http_set_misc_module.so;
load_module modules/ngx_http_echo_module.so;

events {
  use epoll;
  worker_connections 51200;
  multi_accept on;
}

http {
  include   /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format  main  '${NGINX_HTTP_LOG_FORMAT}';

  access_log  ${NGINX_LOG_DIR}/access.log  main;

  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 1024m;
  client_body_buffer_size 10m;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 120;
  server_tokens off;
  tcp_nodelay on;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  #Gzip Compression
  gzip on;
  gzip_buffers 16 8k;
  gzip_comp_level 6;
  gzip_http_version 1.1;
  gzip_min_length 256;
  gzip_proxied any;
  gzip_vary on;
  gzip_types
    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml
    text/javascript application/javascript application/x-javascript
    text/x-json application/json application/x-web-app-manifest+json
    text/css text/plain text/x-component
    font/opentype application/x-font-ttf application/vnd.ms-fontobject
    image/x-icon;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";

  #If you have a lot of static files to serve through Nginx then caching of the files' metadata (not the actual files' contents) can save some latency.
  open_file_cache max=1000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;

  #SSI 相关
  ssi ${NGINX_HTTP_SSI};
  ssi_silent_errors  ${NGINX_HTTP_SSI_SILENT_ERRORS};
  ssi_types text/shtml;
  ssi_value_length 256;
  
  # http://nginx.org/en/docs/http/ngx_http_limit_req_module.html
  limit_req_zone \$binary_remote_addr zone=one:10m rate=2r/s;
  # http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html
  limit_conn_zone \$binary_remote_addr zone=addr:10m;
  # lua rest core
  lua_package_path "${NGINX_HTTP_LUA_PACKAGE_PATH};/etc/nginx/lua/lib/ngx/?.lua;/etc/nginx/lua/lib/resty/?.lua;/etc/nginx/lua/lib/?.lua;;";
  init_by_lua_block {
    require "resty.core"
    collectgarbage("collect")
  }
  # lua rest core end

  charset ${NGINX_HTTP_CHARSET};

  include ${NGINX_CONF_DIR}/*.conf;
}
EOF

# php8 不支持--enable-force-cgi-redirect
# 在${NGINX_ROOT_DIR}/fastcgi.conf 中追加以下配置
if [ "$PHP_VERSION"=="7.*" ];then
  cat >> ${NGINX_ROOT_DIR}/fastcgi.conf <<EOF

# PHP only, required if PHP was built with --enable-force-cgi-redirect
fastcgi_param  REDIRECT_STATUS    200;

EOF
fi

# 如果使用环境变量
if [ ${USE_ENV_CONF} == "Y" ]; then
 
    SERVER_FASTCGI_PASS_STR="#fastcgi_pass php:9000;"
    if [ ! -z "$NGINX_SERVER_FASTCGI_PASS" ]; then
       SERVER_FASTCGI_PASS_STR="fastcgi_pass ${NGINX_SERVER_FASTCGI_PASS};"
    fi
    # 如果原来存在文件，则进行变量查找替换，否则新建文件
    if [ -e ${NGINX_CONF_DIR}/default.conf ];then
      # 对能找到的变量进行替换
      sed -i "s@ listen .*;@listen ${NGINX_HTTP_SERVER_LISTEN};@g" ${NGINX_CONF_DIR}/default.conf
      sed -i "s@ server_name .*;@server_name ${NGINX_HTTP_SERVER_NAME};@g" ${NGINX_CONF_DIR}/default.conf
      sed -i "s@ root .*;@root ${NGINX_HTTP_SERVER_ROOT};@g" ${NGINX_CONF_DIR}/default.conf
      sed -i "s@ index .*;@index ${NGINX_HTTP_SERVER_INDEX};@g" ${NGINX_CONF_DIR}/default.conf
      sed -i "s@fastcgi_pass .*;@${SERVER_FASTCGI_PASS_STR}@g" ${NGINX_CONF_DIR}/default.conf
    else

    cat > ${NGINX_CONF_DIR}/default.conf <<EOF
server {
    listen ${NGINX_HTTP_SERVER_LISTEN};
    server_name ${NGINX_HTTP_SERVER_NAME};
    root ${NGINX_HTTP_SERVER_ROOT};
    index ${NGINX_HTTP_SERVER_INDEX};
    #error page
    #error_page 404             /404.html;
    #error_page 500 502 503 504 /50x.html;
    # for laravel rewrite
    # location / {
    #   try_files \$uri /index.php?\$args;
    # }

    #rewrite for thinkphp
    # if (!-e \$request_filename) {
    #   rewrite "^/(.*)"  /index.php?s=/\$1 last;
    #   break;
    # }

    # 与php容器协同工作 start
    # fastcgi_pass [连接容器的名字或则别名]:9000， 如不需要PHP支持，可删除本段
   location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        ${SERVER_FASTCGI_PASS_STR}
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param PATH_INFO \$fastcgi_path_info;
        fastcgi_param QUERY_STRING    \$query_string;
        fastcgi_param REQUEST_METHOD  \$request_method;
        fastcgi_param CONTENT_TYPE    \$content_type;
        fastcgi_param CONTENT_LENGTH  \$content_length;
    }
    # 与php容器协同工作end
    #just for test lua
    # more info for lua nginx https://github.com/openresty/lua-nginx-module
    # https://github.com/openresty/encrypted-session-nginx-module
    location /hello {
      default_type 'text/plain';
      content_by_lua 'ngx.say("hello, lua")';
    }
    location /lua_content {
         # MIME type determined by default_type:
         default_type 'text/plain';

         content_by_lua_block {
             ngx.say('Hello,world!')
         }
     }
     location /nginx_var {
         # MIME type determined by default_type:
         default_type 'text/plain';
         # try access /nginx_var?a=hello,world
         content_by_lua_block {
             ngx.say(ngx.var.arg_a)
         }
     }
     location /redis_demo {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("${REDIS_HOST}", ${REDIS_PORT})
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                red:get("cat")
                red:get("horse")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                for i, res in ipairs(results) do
                    if type(res) == "table" then
                        if res[1] == false then
                            ngx.say("failed to run command ", i, ": ", res[2])
                        else
                            -- process the table value
                        end
                    else
                        -- process the scalar value
                    end
                end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = red:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            }
        }
      location /cookie_test {
            content_by_lua '
                local ck = require "resty.cookie"
                local cookie, err = ck:new()
                if not cookie then
                    ngx.log(ngx.ERR, err)
                    return
                end

                -- get single cookie
                local field, err = cookie:get("lang")
                if not field then
                    ngx.log(ngx.ERR, err)
                    return
                end
                ngx.say("lang", " => ", field)

                -- get all cookies
                local fields, err = cookie:get_all()
                if not fields then
                    ngx.log(ngx.ERR, err)
                    return
                end

                for k, v in pairs(fields) do
                    ngx.say(k, " => ", v)
                end

                -- set one cookie
                local ok, err = cookie:set({
                    key = "Name", value = "Bob", path = "/",
                    domain = "example.com", secure = true, httponly = true,
                    expires = "Wed, 09 Jun 2021 10:18:14 GMT", max_age = 50,
                    samesite = "Strict", extension = "a4334aebaec"
                })
                if not ok then
                    ngx.log(ngx.ERR, err)
                    return
                end

                -- set another cookie, both cookies will appear in HTTP response
                local ok, err = cookie:set({
                    key = "Age", value = "20",
                })
                if not ok then
                    ngx.log(ngx.ERR, err)
                    return
                end
            ';
        }
     #just for test lua end
    # 配置拦截后拒绝访问时展示的页面，这里直接返回403。
    location /RequestDenied {
      return 403;
    }
    #静态资源缓存配置
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ { expires 30d;  access_log off; }
    location ~ .*\.(js|css)?$ { expires 7d; access_log off; }
    location ~ /\.ht { deny all; }
}
EOF
    fi

fi

# first arg is `-f` or `--some-option`
if [ "${1#-}" != "$1" ]; then
	set -- nginx "$@"
fi

# exec su-exec www-data:www-data "$@"
exec "$@"
